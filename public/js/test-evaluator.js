/*! For license information please see test-evaluator.js.LICENSE.txt */
(()=>{var __webpack_modules__={553:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof h?e:h,i=Object.create(o.prototype),a=new x(n||[]);return i._invoke=function(t,e,r){var n=p;return function(o,i){if(n===l)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return k()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=O(a,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=l;var u=s(t,e,r);if("normal"===u.type){if(n=r.done?y:f,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",l="executing",y="completed",d={};function h(){}function _(){}function g(){}var b={};b[i]=function(){return this};var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==r&&n.call(m,i)&&(b=m);var E=g.prototype=h.prototype=Object.create(b);function w(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function A(t,e){function r(o,i,a,c){var u=s(t[o],t,i);if("throw"!==u.type){var p=u.arg,f=p.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(f).then((function(t){p.value=t,a(p)}),(function(t){return r("throw",t,a,c)}))}c(u.arg)}var o;this._invoke=function(t,n){function i(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(i,i):i()}}function O(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,O(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=s(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:k}}function k(){return{value:e,done:!0}}return _.prototype=E.constructor=g,g.constructor=_,g[c]=_.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},w(A.prototype),A.prototype[a]=function(){return this},t.AsyncIterator=A,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new A(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},w(E),E[c]="Generator",E[i]=function(){return this},E.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=j,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:j(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},757:(t,e,r)=>{t.exports=r(553)},61:(t,e,r)=>{"use strict";const n=r(99),o=r(371),i=t.exports=(t,e)=>{const r={...e,block:!0,line:!0};return n(o(t,r),r)};i.block=(t,e)=>{const r={...e,block:!0};return n(o(t,r),r)},i.line=(t,e)=>{const r={...e,line:!0};return n(o(t,r),r)},i.first=(t,e)=>{const r={...e,block:!0,line:!0,first:!0};return n(o(t,r),r)},i.parse=o},602:t=>{"use strict";class e{constructor(t){this.type=t.type,t.value&&(this.value=t.value),t.match&&(this.match=t.match),this.newline=t.newline||""}get protected(){return Boolean(this.match)&&"!"===this.match[1]}}t.exports={Node:e,Block:class extends e{constructor(t){super(t),this.nodes=t.nodes||[]}push(t){this.nodes.push(t)}get protected(){return this.nodes.length>0&&!0===this.nodes[0].protected}}}},99:t=>{"use strict";t.exports=(t,e={})=>{const r=!0===e.safe||!0===e.keepProtected;let n=!1;const o=t=>{let i,a,c="";for(const u of t.nodes)switch(u.type){case"block":if(e.first&&!0===n){c+=o(u,t);break}if(!0===e.preserveNewlines){i=o(u,t),a=i.split("\n"),c+="\n".repeat(a.length-1);break}if(!0===r&&!0===u.protected){c+=o(u,t);break}n=!0;break;case"line":if(e.first&&!0===n){c+=u.value;break}!0===r&&!0===u.protected&&(c+=u.value),n=!0;break;case"open":case"close":case"text":case"newline":default:c+=u.value||""}return c};return o(t)}},369:(t,e)=>{"use strict";e.ada={LINE_REGEX:/^--.*/},e.apl={LINE_REGEX:/^⍝.*/},e.applescript={BLOCK_OPEN_REGEX:/^\(\*/,BLOCK_CLOSE_REGEX:/^\*\)/},e.csharp={LINE_REGEX:/^\/\/.*/},e.haskell={BLOCK_OPEN_REGEX:/^\{-/,BLOCK_CLOSE_REGEX:/^-\}/,LINE_REGEX:/^--.*/},e.javascript={BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},e.lua={BLOCK_OPEN_REGEX:/^--\[\[/,BLOCK_CLOSE_REGEX:/^\]\]/,LINE_REGEX:/^--.*/},e.matlab={BLOCK_OPEN_REGEX:/^%{/,BLOCK_CLOSE_REGEX:/^%}/,LINE_REGEX:/^%.*/},e.perl={LINE_REGEX:/^#.*/},e.php={...e.javascript,LINE_REGEX:/^(#|\/\/).*?(?=\?>|\n)/},e.python={BLOCK_OPEN_REGEX:/^"""/,BLOCK_CLOSE_REGEX:/^"""/,LINE_REGEX:/^#.*/},e.ruby={BLOCK_OPEN_REGEX:/^=begin/,BLOCK_CLOSE_REGEX:/^=end/,LINE_REGEX:/^#.*/},e.shebang=e.hashbang={LINE_REGEX:/^#!.*/},e.c=e.javascript,e.csharp=e.javascript,e.css=e.javascript,e.java=e.javascript,e.js=e.javascript,e.less=e.javascript,e.pascal=e.applescript,e.ocaml=e.applescript,e.sass=e.javascript,e.sql=e.ada,e.swift=e.javascript,e.ts=e.javascript,e.typscript=e.javascript},371:(t,e,r)=>{"use strict";const{Node:n,Block:o}=r(602),i=r(369),a=/^\\./,c=/^(['"`])((?:\\\1|[^\1])*?)(\1)/,u=/^\r*\n/;t.exports=(t,e={})=>{if("string"!=typeof t)throw new TypeError("Expected input to be a string");const r=new o({type:"root",nodes:[]}),s=[r],p=(e.language||"javascript").toLowerCase(),f=i[p];if(void 0===f)throw new Error(`Language "${p}" is not supported by strip-comments`);const{LINE_REGEX:l,BLOCK_OPEN_REGEX:y,BLOCK_CLOSE_REGEX:d}=f;let h,_,g=r,b=t,v=!1;[y,d].filter(Boolean).every((t=>'^"""'===t.source))&&(v=!0);const m=(t=b[0]||"")=>(b=b.slice(t.length),t),E=(t,e="text")=>{const r=t.exec(b);if(r)return m(r[0]),{type:e,value:r[0],match:r}},w=t=>{_&&"text"===_.type&&"text"===t.type?_.value+=t.value:(g.push(t),t.nodes&&(s.push(t),g=t),_=t)},A=()=>{if("root"===g.type)throw new SyntaxError("Unclosed block comment");s.pop(),g=s[s.length-1]};for(;""!==b;)(h=E(a,"text"))?w(new n(h)):"block"===g.type||_&&/\w$/.test(_.value)||v&&b.startsWith('"""')||!(h=E(c,"text"))?(h=E(u,"newline"))?w(new n(h)):!y||!e.block||v&&"block"===g.type||!(h=E(y,"open"))?d&&"block"===g.type&&e.block&&(h=E(d,"close"))?(h.newline=h.match[1]||"",w(new n(h)),A()):l&&"block"!==g.type&&e.line&&(h=E(l,"line"))||(h=E(/^[a-zABD-Z0-9\t ]+/,"text"))?w(new n(h)):w(new n({type:"text",value:m(b[0])})):(w(new o({type:"block"})),w(new n(h))):w(new n(h));return r}},62:(t,e,r)=>{"use strict";r.d(e,{o:()=>i});var n=r(61),o=r.n(n),i=function(t){try{return o()(t)}catch(e){return t}}},706:(t,e,r)=>{"use strict";r.d(e,{W:()=>o});var n=r(539);function o(t){return"string"==typeof t?t:(0,n.inspect)(t)}},924:(t,e,r)=>{"use strict";var n=r(210),o=r(559),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")>-1?o(r):r}},559:(t,e,r)=>{"use strict";var n=r(612),o=r(210),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),c=o("%Reflect.apply%",!0)||n.call(a,i),u=o("%Object.getOwnPropertyDescriptor%",!0),s=o("%Object.defineProperty%",!0),p=o("%Math.max%");if(s)try{s({},"a",{value:1})}catch(t){s=null}t.exports=function(t){var e=c(n,a,arguments);if(u&&s){var r=u(e,"length");r.configurable&&s(e,"length",{value:1+p(0,t.length-(arguments.length-1))})}return e};var f=function(){return c(n,i,arguments)};s?s(t.exports,"apply",{value:f}):t.exports.apply=f},804:t=>{var e=Object.prototype.hasOwnProperty,r=Object.prototype.toString;t.exports=function(t,n,o){if("[object Function]"!==r.call(n))throw new TypeError("iterator must be a function");var i=t.length;if(i===+i)for(var a=0;a<i;a++)n.call(o,t[a],a,t);else for(var c in t)e.call(t,c)&&n.call(o,t[c],c,t)}},648:t=>{"use strict";var e="Function.prototype.bind called on incompatible ",r=Array.prototype.slice,n=Object.prototype.toString,o="[object Function]";t.exports=function(t){var i=this;if("function"!=typeof i||n.call(i)!==o)throw new TypeError(e+i);for(var a,c=r.call(arguments,1),u=function(){if(this instanceof a){var e=i.apply(this,c.concat(r.call(arguments)));return Object(e)===e?e:this}return i.apply(t,c.concat(r.call(arguments)))},s=Math.max(0,i.length-c.length),p=[],f=0;f<s;f++)p.push("$"+f);if(a=Function("binder","return function ("+p.join(",")+"){ return binder.apply(this,arguments); }")(u),i.prototype){var l=function(){};l.prototype=i.prototype,a.prototype=new l,l.prototype=null}return a}},612:(t,e,r)=>{"use strict";var n=r(648);t.exports=Function.prototype.bind||n},210:(t,e,r)=>{"use strict";var n,o=SyntaxError,i=Function,a=TypeError,c=function(t){try{return i('"use strict"; return ('+t+").constructor;")()}catch(t){}},u=Object.getOwnPropertyDescriptor;if(u)try{u({},"")}catch(t){u=null}var s=function(){throw new a},p=u?function(){try{return s}catch(t){try{return u(arguments,"callee").get}catch(t){return s}}}():s,f=r(405)(),l=Object.getPrototypeOf||function(t){return t.__proto__},y={},d="undefined"==typeof Uint8Array?n:l(Uint8Array),h={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":f?l([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":y,"%AsyncGenerator%":y,"%AsyncGeneratorFunction%":y,"%AsyncIteratorPrototype%":y,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":y,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?l(l([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?l((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?l((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?l(""[Symbol.iterator]()):n,"%Symbol%":f?Symbol:n,"%SyntaxError%":o,"%ThrowTypeError%":p,"%TypedArray%":d,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet},_=function t(e){var r;if("%AsyncFunction%"===e)r=c("async function () {}");else if("%GeneratorFunction%"===e)r=c("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=c("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&(r=l(o.prototype))}return h[e]=r,r},g={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=r(612),v=r(642),m=b.call(Function.call,Array.prototype.concat),E=b.call(Function.apply,Array.prototype.splice),w=b.call(Function.call,String.prototype.replace),A=b.call(Function.call,String.prototype.slice),O=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,S=/\\(\\)?/g,P=function(t){var e=A(t,0,1),r=A(t,-1);if("%"===e&&"%"!==r)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new o("invalid intrinsic syntax, expected opening `%`");var n=[];return w(t,O,(function(t,e,r,o){n[n.length]=r?w(o,S,"$1"):e||t})),n},x=function(t,e){var r,n=t;if(v(g,n)&&(n="%"+(r=g[n])[0]+"%"),v(h,n)){var i=h[n];if(i===y&&(i=_(n)),void 0===i&&!e)throw new a("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:i}}throw new o("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new a('"allowMissing" argument must be a boolean');var r=P(t),n=r.length>0?r[0]:"",i=x("%"+n+"%",e),c=i.name,s=i.value,p=!1,f=i.alias;f&&(n=f[0],E(r,m([0,1],f)));for(var l=1,y=!0;l<r.length;l+=1){var d=r[l],_=A(d,0,1),g=A(d,-1);if(('"'===_||"'"===_||"`"===_||'"'===g||"'"===g||"`"===g)&&_!==g)throw new o("property names with quotes must have matching quotes");if("constructor"!==d&&y||(p=!0),v(h,c="%"+(n+="."+d)+"%"))s=h[c];else if(null!=s){if(!(d in s)){if(!e)throw new a("base intrinsic for "+t+" exists, but the property is not available.");return}if(u&&l+1>=r.length){var b=u(s,d);s=(y=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:s[d]}else y=v(s,d),s=s[d];y&&!p&&(h[c]=s)}}return s}},405:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(419);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&o()}},419:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},642:(t,e,r)=>{"use strict";var n=r(612);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},584:(t,e,r)=>{"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,o=r(924)("Object.prototype.toString"),i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},c=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=c?i:a},662:t=>{"use strict";var e,r=Object.prototype.toString,n=Function.prototype.toString,o=/^\s*(?:function)?\*/,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,a=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(o.test(n.call(t)))return!0;if(!i)return"[object GeneratorFunction]"===r.call(t);if(!a)return!1;if(void 0===e){var c=function(){if(!i)return!1;try{return Function("return function*() {}")()}catch(t){}}();e=!!c&&a(c)}return a(t)===e}},692:(t,e,r)=>{"use strict";var n=r(804),o=r(83),i=r(924),a=i("Object.prototype.toString"),c=r(405)()&&"symbol"==typeof Symbol.toStringTag,u=o(),s=i("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},p=i("String.prototype.slice"),f={},l=r(882),y=Object.getPrototypeOf;c&&l&&y&&n(u,(function(t){var e=new r.g[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=y(e),o=l(n,Symbol.toStringTag);if(!o){var i=y(n);o=l(i,Symbol.toStringTag)}f[t]=o.get})),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!c){var e=p(a(t),8,-1);return s(u,e)>-1}return!!l&&function(t){var e=!1;return n(f,(function(r,n){if(!e)try{e=r.call(t)===n}catch(t){}})),e}(t)}},155:t=>{var e,r,n=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var c,u=[],s=!1,p=-1;function f(){s&&c&&(s=!1,c.length?u=c.concat(u):p=-1,u.length&&l())}function l(){if(!s){var t=a(f);s=!0;for(var e=u.length;e;){for(c=u,u=[];++p<e;)c&&c[p].run();p=-1,e=u.length}c=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function d(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];u.push(new y(t,e)),1!==u.length||s||a(l)},y.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=d,n.addListener=d,n.once=d,n.off=d,n.removeListener=d,n.removeAllListeners=d,n.emit=d,n.prependListener=d,n.prependOnceListener=d,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},955:(t,e,r)=>{"use strict";var n=r(584),o=r(662),i=r(430),a=r(692);function c(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,s="undefined"!=typeof Symbol,p=c(Object.prototype.toString),f=c(Number.prototype.valueOf),l=c(String.prototype.valueOf),y=c(Boolean.prototype.valueOf);if(u)var d=c(BigInt.prototype.valueOf);if(s)var h=c(Symbol.prototype.valueOf);function _(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function g(t){return"[object Map]"===p(t)}function b(t){return"[object Set]"===p(t)}function v(t){return"[object WeakMap]"===p(t)}function m(t){return"[object WeakSet]"===p(t)}function E(t){return"[object ArrayBuffer]"===p(t)}function w(t){return"undefined"!=typeof ArrayBuffer&&(E.working?E(t):t instanceof ArrayBuffer)}function A(t){return"[object DataView]"===p(t)}function O(t){return"undefined"!=typeof DataView&&(A.working?A(t):t instanceof DataView)}function S(t){return"[object SharedArrayBuffer]"===p(t)}function P(t){return"undefined"!=typeof SharedArrayBuffer&&(S.working?S(t):t instanceof SharedArrayBuffer)}function x(t){return _(t,f)}function j(t){return _(t,l)}function k(t){return _(t,y)}function I(t){return u&&_(t,d)}function L(t){return s&&_(t,h)}e.isArgumentsObject=n,e.isGeneratorFunction=o,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||O(t)},e.isUint8Array=function(t){return"Uint8Array"===i(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===i(t)},e.isUint16Array=function(t){return"Uint16Array"===i(t)},e.isUint32Array=function(t){return"Uint32Array"===i(t)},e.isInt8Array=function(t){return"Int8Array"===i(t)},e.isInt16Array=function(t){return"Int16Array"===i(t)},e.isInt32Array=function(t){return"Int32Array"===i(t)},e.isFloat32Array=function(t){return"Float32Array"===i(t)},e.isFloat64Array=function(t){return"Float64Array"===i(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===i(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===i(t)},g.working="undefined"!=typeof Map&&g(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(g.working?g(t):t instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(b.working?b(t):t instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(v.working?v(t):t instanceof WeakMap)},m.working="undefined"!=typeof WeakSet&&m(new WeakSet),e.isWeakSet=function(t){return m(t)},E.working="undefined"!=typeof ArrayBuffer&&E(new ArrayBuffer),e.isArrayBuffer=w,A.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&A(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=O,S.working="undefined"!=typeof SharedArrayBuffer&&S(new SharedArrayBuffer),e.isSharedArrayBuffer=P,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===p(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===p(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===p(t)},e.isGeneratorObject=function(t){return"[object Generator]"===p(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===p(t)},e.isNumberObject=x,e.isStringObject=j,e.isBooleanObject=k,e.isBigIntObject=I,e.isSymbolObject=L,e.isBoxedPrimitive=function(t){return x(t)||j(t)||k(t)||I(t)||L(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(w(t)||P(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},539:(t,e,r)=>{var n=r(155),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},i=/%[sdj%]/g;e.format=function(t){if(!v(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(s(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),c=n[r];r<o;c=n[++r])g(c)||!w(c)?a+=" "+c:a+=" "+s(c);return a},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?console.trace(r):console.error(r),o=!0}return t.apply(this,arguments)}};var a={},c=/^$/;if(n.env.NODE_DEBUG){var u=n.env.NODE_DEBUG;u=u.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),c=new RegExp("^"+u+"$","i")}function s(t,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),_(r)?n.showHidden=r:r&&e._extend(n,r),m(n.showHidden)&&(n.showHidden=!1),m(n.depth)&&(n.depth=2),m(n.colors)&&(n.colors=!1),m(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=p),l(n,t,n.depth)}function p(t,e){var r=s.styles[e];return r?"["+s.colors[r][0]+"m"+t+"["+s.colors[r][1]+"m":t}function f(t,e){return t}function l(t,r,n){if(t.customInspect&&r&&S(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return v(o)||(o=l(t,o,n)),o}var i=function(t,e){if(m(e))return t.stylize("undefined","undefined");if(v(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return b(e)?t.stylize(""+e,"number"):_(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,r);if(i)return i;var a=Object.keys(r),c=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),O(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return y(r);if(0===a.length){if(S(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(E(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(A(r))return t.stylize(Date.prototype.toString.call(r),"date");if(O(r))return y(r)}var s,p="",f=!1,w=["{","}"];return h(r)&&(f=!0,w=["[","]"]),S(r)&&(p=" [Function"+(r.name?": "+r.name:"")+"]"),E(r)&&(p=" "+RegExp.prototype.toString.call(r)),A(r)&&(p=" "+Date.prototype.toUTCString.call(r)),O(r)&&(p=" "+y(r)),0!==a.length||f&&0!=r.length?n<0?E(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),s=f?function(t,e,r,n,o){for(var i=[],a=0,c=e.length;a<c;++a)I(e,String(a))?i.push(d(t,e,r,n,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(d(t,e,r,n,o,!0))})),i}(t,r,n,c,a):a.map((function(e){return d(t,r,n,c,e,f)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(s,p,w)):w[0]+p+w[1]}function y(t){return"["+Error.prototype.toString.call(t)+"]"}function d(t,e,r,n,o,i){var a,c,u;if((u=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?c=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(c=t.stylize("[Setter]","special")),I(n,o)||(a="["+o+"]"),c||(t.seen.indexOf(u.value)<0?(c=g(r)?l(t,u.value,null):l(t,u.value,r-1)).indexOf("\n")>-1&&(c=i?c.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+c.split("\n").map((function(t){return"   "+t})).join("\n")):c=t.stylize("[Circular]","special")),m(a)){if(i&&o.match(/^\d+$/))return c;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+c}function h(t){return Array.isArray(t)}function _(t){return"boolean"==typeof t}function g(t){return null===t}function b(t){return"number"==typeof t}function v(t){return"string"==typeof t}function m(t){return void 0===t}function E(t){return w(t)&&"[object RegExp]"===P(t)}function w(t){return"object"==typeof t&&null!==t}function A(t){return w(t)&&"[object Date]"===P(t)}function O(t){return w(t)&&("[object Error]"===P(t)||t instanceof Error)}function S(t){return"function"==typeof t}function P(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(c.test(t)){var r=n.pid;a[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else a[t]=function(){};return a[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(955),e.isArray=h,e.isBoolean=_,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=b,e.isString=v,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=m,e.isRegExp=E,e.types.isRegExp=E,e.isObject=w,e.isDate=A,e.types.isDate=A,e.isError=O,e.types.isNativeError=O,e.isFunction=S,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(384);var j=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),j[t.getMonth()],e].join(" ")}function I(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",k(),e.format.apply(e,arguments))},e.inherits=r(717),e._extend=function(t,e){if(!e||!w(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var L="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function R(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(L&&t[L]){var e;if("function"!=typeof(e=t[L]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,L,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),L&&Object.defineProperty(e,L,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=L,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var o=e.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,a=function(){return o.apply(i,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(R.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}},430:(t,e,r)=>{"use strict";var n=r(804),o=r(83),i=r(924),a=i("Object.prototype.toString"),c=r(405)()&&"symbol"==typeof Symbol.toStringTag,u=o(),s=i("String.prototype.slice"),p={},f=r(882),l=Object.getPrototypeOf;c&&f&&l&&n(u,(function(t){if("function"==typeof r.g[t]){var e=new r.g[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=l(e),o=f(n,Symbol.toStringTag);if(!o){var i=l(n);o=f(i,Symbol.toStringTag)}p[t]=o.get}}));var y=r(692);t.exports=function(t){return!!y(t)&&(c?function(t){var e=!1;return n(p,(function(r,n){if(!e)try{var o=r.call(t);o===n&&(e=o)}catch(t){}})),e}(t):s(a(t),8,-1))}},83:(t,e,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"];t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof r.g[n[e]]&&(t[t.length]=n[e]);return t}},882:(t,e,r)=>{"use strict";var n=r(210)("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(t){n=null}t.exports=n},861:(t,e,r)=>{"use strict";function n(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function o(t){return function(){var e=this,r=arguments;return new Promise((function(o,i){var a=t.apply(e,r);function c(t){n(a,o,i,c,u,"next",t)}function u(t){n(a,o,i,c,u,"throw",t)}c(void 0)}))}}r.d(e,{Z:()=>o})},785:(t,e,r)=>{"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function o(t){return function(t){if(Array.isArray(t))return n(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}r.d(e,{Z:()=>o})}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](r,r.exports,__webpack_require__),r.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var __webpack_exports__={};(()=>{"use strict";var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(861),_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(785),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(757),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__),_utils_format__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(706),_utils_curriculum_helpers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(62),getUtils=function(){if("undefined"!=typeof self){var t=[],e=self.console.log.bind(self.console);return{postResult:function(t){r(),self.postMessage(t)},log:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];var n;e&&e[0]&&(n=console).log.apply(n,(0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.Z)(e.map((function(t){return String(t)}))))},toggleProxyLogger:function(t){self.console.log=t?n:e},flushLogs:r}}function r(){t.length&&(self.postMessage({type:"LOG",data:t.join("\n")}),t=[])}function n(){for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return t.push(o.map((function(t){return(0,_utils_format__WEBPACK_IMPORTED_MODULE_1__.W)(t)})).join(" ")),t.join("\n").length>65536&&r(),e.apply(void 0,o)}},_helpers={removeWhitespace:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return e>=t.length?r:" "==t[e]?_helpers.removeWhitespace(t,e+1,r):_helpers.removeWhitespace(t,e+1,r+=t[e])}},run=function(){var _ref=(0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__.Z)(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark((function _callee(e){var _e$data,_e$data$code,_e$data2,_e$data3,_e$data3$code,_e$data4,utils,code,editableContents,testResult,__userCodeWasExecuted;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if("undefined"!=typeof self){_context.next=2;break}return _context.abrupt("return");case 2:utils=getUtils(),code=((null===(_e$data=e.data)||void 0===_e$data||null===(_e$data$code=_e$data.code)||void 0===_e$data$code?void 0:_e$data$code.contents)||"").slice(),code=null!==(_e$data2=e.data)&&void 0!==_e$data2&&_e$data2.removeComments?(0,_utils_curriculum_helpers__WEBPACK_IMPORTED_MODULE_2__.o)(code):code,editableContents=((null===(_e$data3=e.data)||void 0===_e$data3||null===(_e$data3$code=_e$data3.code)||void 0===_e$data3$code?void 0:_e$data3$code.editableContents)||"").slice(),editableContents=null!==(_e$data4=e.data)&&void 0!==_e$data4&&_e$data4.removeComments?(0,_utils_curriculum_helpers__WEBPACK_IMPORTED_MODULE_2__.o)(editableContents):editableContents,utils.toggleProxyLogger(e.data.firstTest),_context.prev=9,__userCodeWasExecuted=!1,_context.prev=11,testResult=eval("\n        utils.flushLogs();\n        __userCodeWasExecuted = true;\n        utils.toggleProxyLogger(true);\n        ".concat(e.data.code.contents,";\n        var _codeString = `").concat(e.data.code.contents,"}`;\n        var result = eval(`").concat(e.data.internalTest,"`) // evaluates the user's code\n        if (!result) {\n          throw new Error('did not pass')\n        }\n      ")),_context.next=19;break;case 15:return _context.prev=15,_context.t0=_context.catch(11),utils.postResult({pass:!1,err:_context.t0}),_context.abrupt("return");case 19:if("function"!=typeof testResult){_context.next=22;break}return _context.next=22,testResult((function(t){return String(e.data.sources[t])}));case 22:utils.postResult({pass:!0,test:456}),_context.next=31;break;case 25:_context.prev=25,_context.t1=_context.catch(9),console.log("maybe it happens here"),utils.toggleProxyLogger(!1),utils.log(_context.t1),utils.postResult({err:{message:_context.t1.message,pass:!1,stack:_context.t1.stack}});case 31:case"end":return _context.stop()}}),_callee,null,[[9,25],[11,15]])})));return function(t){return _ref.apply(this,arguments)}}();"undefined"!=typeof self&&self.postMessage({type:"contentLoaded"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,